// Code generated by mocktail; DO NOT EDIT.

package commands

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/platform"
)

// commandStoreMock mock of CommandStore.
type commandStoreMock struct{ mock.Mock }

// newCommandStoreMock creates a new commandStoreMock.
func newCommandStoreMock(tb testing.TB) *commandStoreMock {
	tb.Helper()

	m := &commandStoreMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *commandStoreMock) ListPendingCommands(_ context.Context) ([]platform.Command, error) {
	_ret := _m.Called()

	_ra0, _ := _ret.Get(0).([]platform.Command)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *commandStoreMock) OnListPendingCommands() *commandStoreListPendingCommandsCall {
	return &commandStoreListPendingCommandsCall{Call: _m.Mock.On("ListPendingCommands"), Parent: _m}
}

func (_m *commandStoreMock) OnListPendingCommandsRaw() *commandStoreListPendingCommandsCall {
	return &commandStoreListPendingCommandsCall{Call: _m.Mock.On("ListPendingCommands"), Parent: _m}
}

type commandStoreListPendingCommandsCall struct {
	*mock.Call
	Parent *commandStoreMock
}

func (_c *commandStoreListPendingCommandsCall) Panic(msg string) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *commandStoreListPendingCommandsCall) Once() *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *commandStoreListPendingCommandsCall) Twice() *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *commandStoreListPendingCommandsCall) Times(i int) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *commandStoreListPendingCommandsCall) WaitUntil(w <-chan time.Time) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *commandStoreListPendingCommandsCall) After(d time.Duration) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *commandStoreListPendingCommandsCall) Run(fn func(args mock.Arguments)) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *commandStoreListPendingCommandsCall) Maybe() *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *commandStoreListPendingCommandsCall) TypedReturns(a []platform.Command, b error) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *commandStoreListPendingCommandsCall) ReturnsFn(fn func() ([]platform.Command, error)) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *commandStoreListPendingCommandsCall) TypedRun(fn func()) *commandStoreListPendingCommandsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *commandStoreListPendingCommandsCall) OnListPendingCommands() *commandStoreListPendingCommandsCall {
	return _c.Parent.OnListPendingCommands()
}

func (_c *commandStoreListPendingCommandsCall) OnSendCommandReports(reports []platform.CommandReport) *commandStoreSendCommandReportsCall {
	return _c.Parent.OnSendCommandReports(reports)
}

func (_c *commandStoreListPendingCommandsCall) OnListPendingCommandsRaw() *commandStoreListPendingCommandsCall {
	return _c.Parent.OnListPendingCommandsRaw()
}

func (_c *commandStoreListPendingCommandsCall) OnSendCommandReportsRaw(reports interface{}) *commandStoreSendCommandReportsCall {
	return _c.Parent.OnSendCommandReportsRaw(reports)
}

func (_m *commandStoreMock) SendCommandReports(_ context.Context, reports []platform.CommandReport) error {
	_ret := _m.Called(reports)

	if _rf, ok := _ret.Get(0).(func([]platform.CommandReport) error); ok {
		return _rf(reports)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *commandStoreMock) OnSendCommandReports(reports []platform.CommandReport) *commandStoreSendCommandReportsCall {
	return &commandStoreSendCommandReportsCall{Call: _m.Mock.On("SendCommandReports", reports), Parent: _m}
}

func (_m *commandStoreMock) OnSendCommandReportsRaw(reports interface{}) *commandStoreSendCommandReportsCall {
	return &commandStoreSendCommandReportsCall{Call: _m.Mock.On("SendCommandReports", reports), Parent: _m}
}

type commandStoreSendCommandReportsCall struct {
	*mock.Call
	Parent *commandStoreMock
}

func (_c *commandStoreSendCommandReportsCall) Panic(msg string) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *commandStoreSendCommandReportsCall) Once() *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *commandStoreSendCommandReportsCall) Twice() *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *commandStoreSendCommandReportsCall) Times(i int) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *commandStoreSendCommandReportsCall) WaitUntil(w <-chan time.Time) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *commandStoreSendCommandReportsCall) After(d time.Duration) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *commandStoreSendCommandReportsCall) Run(fn func(args mock.Arguments)) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *commandStoreSendCommandReportsCall) Maybe() *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *commandStoreSendCommandReportsCall) TypedReturns(a error) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *commandStoreSendCommandReportsCall) ReturnsFn(fn func([]platform.CommandReport) error) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *commandStoreSendCommandReportsCall) TypedRun(fn func([]platform.CommandReport)) *commandStoreSendCommandReportsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_reports, _ := args.Get(0).([]platform.CommandReport)
		fn(_reports)
	})
	return _c
}

func (_c *commandStoreSendCommandReportsCall) OnListPendingCommands() *commandStoreListPendingCommandsCall {
	return _c.Parent.OnListPendingCommands()
}

func (_c *commandStoreSendCommandReportsCall) OnSendCommandReports(reports []platform.CommandReport) *commandStoreSendCommandReportsCall {
	return _c.Parent.OnSendCommandReports(reports)
}

func (_c *commandStoreSendCommandReportsCall) OnListPendingCommandsRaw() *commandStoreListPendingCommandsCall {
	return _c.Parent.OnListPendingCommandsRaw()
}

func (_c *commandStoreSendCommandReportsCall) OnSendCommandReportsRaw(reports interface{}) *commandStoreSendCommandReportsCall {
	return _c.Parent.OnSendCommandReportsRaw(reports)
}
